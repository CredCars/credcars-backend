name: CI/CD NestJS → Elastic Beanstalk

on:
  push:
    branches:
      - staging
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          # Key should change if package-lock.json changes
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          # Restores cache if key exists
          path: ~/.npm

      - run: npm ci
      - run: npm run lint
      - run: npm test -- --coverage
      - run: npm run build

      - name: Package for Elastic Beanstalk
        run: |
          zip -r app.zip dist package.json package-lock.json Procfile .ebextensions -x "*.git*" || true
          unzip -l app.zip | head -20

      - uses: actions/upload-artifact@v4
        with:
          name: eb-artifact
          path: app.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: ${{ github.ref_name == 'main' && 'production' || 'staging' &&'staging' }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: eb-artifact
          path: .

      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Determine environment from branch
      - name: Set environment variables
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            ENV="production"
          else
            ENV="staging"
          fi
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "TERRAFORM_DIR=infra/terraform/$ENV" >> $GITHUB_ENV

      # Move app.zip to the correct environment folder
      - name: Move app.zip to Terraform environment directory
        run: |
          mkdir -p $TERRAFORM_DIR
          mv app.zip "$TERRAFORM_DIR/app-${ENV}.zip"

      - name: Create $ENV.tfvars from environment variables
        run: |
          cd $TERRAFORM_DIR
          cat > $ENV.tfvars <<EOF
          database_url = "${MONGODB_URI}"
          jwt_secret = "${JWT_SECRET}"
          jwt_refresh_secret = "${JWT_REFRESH_SECRET}"
          jwt_expires_in = "${JWT_EXPIRES_IN}"
          jwt_refresh_expires_in = "${JWT_REFRESH_EXPIRES_IN}"
          allowed_origins = "${ALLOWED_ORIGINS}"
          frontend_url = "${FRONTEND_URL}"
          env = "${NODE_ENV}"
          EOF
          echo "✅ $ENV.tfvars created successfully"

      # ✅ Initialize and apply Terraform's configuration
      - name: Terraform init
        run: |
          cd $TERRAFORM_DIR
          terraform init -reconfigure

      - name: Terraform apply (staging/production)
        run: |
          cd $TERRAFORM_DIR
          terraform apply -auto-approve -target=aws_iam_user.github_deployer -target=aws_iam_user_policy.github_deployer_policy -var-file="$ENV.tfvars"
      
      - name: Deploy to Elastic Beanstalk
        run: |
          VERSION_LABEL="v-${GITHUB_RUN_NUMBER}-$ENV"
          # Upload app.zip to S3
          aws s3 cp "$TERRAFORM_DIR/app-${ENV}.zip" s3://elasticbeanstalk-${{ vars.AWS_REGION }}-${{ vars.AWS_ACCOUNT_ID }}/app-${ENV}.zip

          # Create new EB version
          aws elasticbeanstalk create-application-version \
            --application-name Credcars-backend \
            --version-label $VERSION_LABEL \
            --source-bundle S3Bucket="elasticbeanstalk-${{ vars.AWS_REGION }}-${{ vars.AWS_ACCOUNT_ID }}",S3Key="app-${ENV}.zip"

          # Update EB environment
          aws elasticbeanstalk update-environment \
            --application-name Credcars-backend \
            --environment-name Credcars-backend-$ENV-env \
            --version-label $VERSION_LABEL


