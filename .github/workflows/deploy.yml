name: CI/CD NestJS → Elastic Beanstalk

on:
  push:
    branches:
      - staging
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm ci
      - run: npm run lint
      - run: npm test -- --coverage
      - run: npm run build

      - name: Package for Elastic Beanstalk
        run: |
          zip -r app.zip dist package.json package-lock.json Procfile .ebextensions -x "*.git*" || true
          unzip -l app.zip | head -20

      - uses: actions/upload-artifact@v4
        with:
          name: eb-artifact
          path: app.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: ${{ github.ref_name == 'main' || 'staging' }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: eb-artifact
          path: .

      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Determine environment from branch
      - name: Set environment variables
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            ENV="production"
          else
            ENV="staging"
          fi
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "TERRAFORM_DIR=infra/terraform/$ENV" >> $GITHUB_ENV

      # Move app.zip to the correct environment folder
      - name: Move app.zip to Terraform environment directory
        run: |
          mkdir -p $TERRAFORM_DIR
          mv app.zip "$TERRAFORM_DIR/app.zip"
       # ✅ Create terraform.tfvars dynamically (from secrets)
      - name: Create terraform.tfvars from secrets
        run: |
          cd $TERRAFORM_DIR
          cat > $ENV.tfvars <<EOF
          database_url = "${{ secrets.MONGODB_URI }}"
          jwt_secret = "${{ secrets.JWT_SECRET }}"
          jwt_refresh_secret = "${{ secrets.JWT_REFRESH_SECRET }}"
          jwt_expires_in = "${{ secrets.JWT_EXPIRES_IN }}"
          jwt_refresh_expires_in = "${{ secrets.JWT_REFRESH_EXPIRES_IN }}"
          EOF
          echo "✅ terraform.tfvars created successfully"

      # ✅ Initialize and apply Terraform configuration
      - name: Terraform init
        run: |
          cd $TERRAFORM_DIR
          terraform init

      - name: Terraform apply (staging/production)
        run: |
          cd $TERRAFORM_DIR
          terraform apply -auto-approve -var-file="$ENV.tfvars"

