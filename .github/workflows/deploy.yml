name: CI/CD NestJS â†’ Elastic Beanstalk

on:
  push:
    branches:
      - staging
      - main

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Run tests
        run: npm test -- --coverage

      - name: Build project
        run: npm run build

      - name: Package artifact
        run: |
          zip -r app.zip \
            package.json package-lock.json dist/ Procfile .ebextensions/ -x "*.git*" "node_modules/*"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: eb-artifact
          path: app.zip

  deploy:
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: eb-artifact
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install EB CLI
        run: pip install --upgrade awsebcli

      - name: Deploy to EB
        run: |
          set -e
          
          # Inject secrets into shell variables
          export AWS_REGION=${{ secrets.AWS_REGION }}
          export EB_APP_NAME_PROD=${{ secrets.EB_APP_NAME_PROD }}
          export EB_ENV_NAME_PROD=${{ secrets.EB_ENV_NAME_PROD }}
          export EB_APP_NAME_STAGING=${{ secrets.EB_APP_NAME_STAGING }}
          export EB_ENV_NAME_STAGING=${{ secrets.EB_ENV_NAME_STAGING }}
          export JWT_SECRET_STAGING=${{ secrets.JWT_SECRET }}
          export JWT_REFRESH_SECRET_STAGING=${{ secrets.JWT_REFRESH_SECRET }}
          export DATABASE_URI_STAGING=${{ secrets.DATABASE_URI_STAGING }}
          export JWT_SECRET_PROD=${{ secrets.JWT_SECRET }}
          export JWT_REFRESH_SECRET_PROD=${{ secrets.JWT_REFRESH_SECRET }}
          export DATABASE_URI_PROD=${{ secrets.DATABASE_URI_PROD }}

          # Determine branch
          BRANCH_NAME=${GITHUB_REF##*/}
          if [ "$BRANCH_NAME" = "main" ]; then
            EB_APP_NAME=$EB_APP_NAME_PROD
            ENV_NAME=$EB_ENV_NAME_PROD
            export JWT_SECRET=$JWT_SECRET_PROD
            export JWT_REFRESH_SECRET=$JWT_REFRESH_SECRET_PROD
            export DATABASE_URI=$DATABASE_URI_PROD
          elif [ "$BRANCH_NAME" = "staging" ]; then
            EB_APP_NAME=$EB_APP_NAME_STAGING
            ENV_NAME=$EB_ENV_NAME_STAGING
            export JWT_SECRET=$JWT_SECRET_STAGING
            export JWT_REFRESH_SECRET=$JWT_REFRESH_SECRET_STAGING
            export DATABASE_URI=$DATABASE_URI_STAGING
          else
            echo "No deployment configured for branch $BRANCH_NAME"
            exit 0
          fi

          echo "Deploying to app: $EB_APP_NAME"
          echo "Deploying to env: $ENV_NAME"

          # Initialize and deploy
          eb init "$EB_APP_NAME" --platform node.js-20 --region "$AWS_REGION"
          eb use "$ENV_NAME"
          DEPLOY_LABEL="app-$(date +%Y%m%d%H%M%S)"
          eb deploy "$ENV_NAME" --label "$DEPLOY_LABEL" --staged --verbose

