name: CI/CD NestJS → Elastic Beanstalk

on:
  push:
    branches:
      - staging
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm

      - run: npm ci
      - run: npm run lint
      - run: npm test -- --coverage
      - run: npm run build

      - name: Set environment
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            ENV="production"
          else
            ENV="staging"
          fi
          echo "ENV=$ENV" >> $GITHUB_ENV

      - name: Package for Elastic Beanstalk
        run: |
          ZIP_NAME="app-$ENV.zip"
          zip -r $ZIP_NAME dist package.json package-lock.json Procfile .ebextensions -x "*.git*" || true
          echo "✅ Created $ZIP_NAME"
          unzip -l $ZIP_NAME | head -20
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: eb-artifact
          path: ${{ env.ZIP_NAME }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: eb-artifact
          path: .

      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Set Terraform directory
        run: |
          TERRAFORM_DIR="infra/terraform/${ENV}"
          echo "TERRAFORM_DIR=$TERRAFORM_DIR" >> $GITHUB_ENV

      - name: Move zip to Terraform directory
        run: |
          mkdir -p $TERRAFORM_DIR
          mv ${{ env.ZIP_NAME }} "$TERRAFORM_DIR/${{ env.ZIP_NAME }}"

      - name: Create $ENV.tfvars
        run: |
          cd $TERRAFORM_DIR
          cat > $ENV.tfvars <<EOF
          database_url = "${MONGODB_URI}"
          jwt_secret = "${JWT_SECRET}"
          jwt_refresh_secret = "${JWT_REFRESH_SECRET}"
          jwt_expires_in = "${JWT_EXPIRES_IN}"
          jwt_refresh_expires_in = "${JWT_REFRESH_EXPIRES_IN}"
          allowed_origins = "${ALLOWED_ORIGINS}"
          frontend_url = "${FRONTEND_URL}"
          env = "${NODE_ENV}"
          EOF
          echo "✅ $ENV.tfvars created"

      - name: Terraform init & apply
        run: |
          cd $TERRAFORM_DIR
          terraform init -reconfigure
          terraform apply -auto-approve \
            -target=aws_iam_user.github_deployer \
            -target=aws_iam_user_policy.github_deployer_policy \
            -var-file="$ENV.tfvars"

      - name: Deploy to Elastic Beanstalk
        run: |
          ZIP_NAME="$TERRAFORM_DIR/app-$ENV.zip"
          VERSION_LABEL="v-${GITHUB_RUN_NUMBER}-$ENV"
          ENV_NAME="Credcars-backend-${ENV}-env"

          echo "Deploying $ZIP_NAME to $ENV_NAME as $VERSION_LABEL"

          # Upload zip to S3
          aws s3 cp "$ZIP_NAME" "s3://elasticbeanstalk-${{ vars.AWS_REGION }}-${{ vars.AWS_ACCOUNT_ID }}/app-$ENV.zip"

          # Create new EB version
          aws elasticbeanstalk create-application-version \
            --application-name Credcars-backend \
            --version-label $VERSION_LABEL \
            --source-bundle S3Bucket="elasticbeanstalk-${{ vars.AWS_REGION }}-${{ vars.AWS_ACCOUNT_ID }}",S3Key="app-$ENV.zip"

          # Update EB environment
          aws elasticbeanstalk update-environment \
            --application-name Credcars-backend \
            --environment-name $ENV_NAME \
            --version-label $VERSION_LABEL

          echo "✅ Deployment complete"
