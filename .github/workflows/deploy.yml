name: CI/CD NestJS â†’ Elastic Beanstalk

on:
  push:
    branches:
      - staging    # deploy to staging
      - main       # deploy to production

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3. Install dependencies
      - name: Install dependencies
        run: npm ci

      # 4. Lint
      - name: Lint
        run: npm run lint

      # 5. Run tests
      - name: Run tests
        run: npm test -- --coverage

      # 6. Build project
      - name: Build project
        run: npm run build

      # 7. Package artifact
      - name: Package artifact
        run: |
          zip -r app.zip \
            package.json package-lock.json dist/ Procfile .ebextensions/ -x "*.git*" "node_modules/*"

      # 8. Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: eb-artifact
          path: app.zip

  deploy:
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      # 1. Download artifact
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: eb-artifact
          path: .

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Install EB CLI
      - name: Install EB CLI
        run: pip install --upgrade awsebcli

      # 4. Deploy to EB
      - name: Deploy to EB
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          EB_APP_NAME_PROD: ${{ secrets.EB_APP_NAME_PROD }}
          EB_APP_NAME_STAGING: ${{ secrets.EB_APP_NAME_STAGING }}
          EB_ENV_NAME_STAGING: ${{ secrets.EB_ENV_NAME_STAGING }}
          EB_ENV_NAME_PROD: ${{ secrets.EB_ENV_NAME_PROD }}
          JWT_SECRET_STAGING: ${{ secrets.JWT_SECRET_STAGING }}
          JWT_REFRESH_SECRET_STAGING: ${{ secrets.JWT_REFRESH_SECRET_STAGING }}
          DATABASE_URI_STAGING: ${{ secrets.DATABASE_URI_STAGING }}
          JWT_SECRET_PROD: ${{ secrets.JWT_SECRET_PROD }}
          JWT_REFRESH_SECRET_PROD: ${{ secrets.JWT_REFRESH_SECRET_PROD }}
          DATABASE_URI_PROD: ${{ secrets.DATABASE_URI_PROD }}
        run: |
          set -e

          # Determine branch and environment
          BRANCH_NAME=${GITHUB_REF##*/}

          if [ "$BRANCH_NAME" = "main" ]; then
            EB_APP_NAME=$EB_APP_NAME_PROD
            ENV_NAME=$EB_ENV_NAME_PROD
            export JWT_SECRET=$JWT_SECRET_PROD
            export JWT_REFRESH_SECRET=$JWT_REFRESH_SECRET_PROD
            export DATABASE_URI=$DATABASE_URI_PROD
          elif [ "$BRANCH_NAME" = "staging" ]; then
            EB_APP_NAME=$EB_APP_NAME_STAGING
            ENV_NAME=$EB_ENV_NAME_STAGING
            export JWT_SECRET=$JWT_SECRET_STAGING
            export JWT_REFRESH_SECRET=$JWT_REFRESH_SECRET_STAGING
            export DATABASE_URI=$DATABASE_URI_STAGING
          else
            echo "No deployment configured for branch $BRANCH_NAME"
            exit 0
          fi

          echo "Deploying to application: $EB_APP_NAME"
          echo "Deploying to environment: $ENV_NAME"

          # Initialize EB application (creates if not exists)
          if ! eb list | grep -q "$EB_APP_NAME"; then
            echo "Application $EB_APP_NAME does not exist. Creating..."
            eb init $EB_APP_NAME --platform node.js-20 --region $AWS_REGION --verbose
          else
            echo "Application $EB_APP_NAME exists. Initializing..."
            eb init $EB_APP_NAME --platform node.js-20 --region $AWS_REGION --verbose
          fi

          # Initialize EB application
          # eb init "$EB_APP_NAME" --platform node.js-20 --region "$AWS_REGION" --verbose

          # Use existing environment
          eb use "$ENV_NAME"

          # Generate unique deployment label
          DEPLOY_LABEL="app-$(date +%Y%m%d%H%M%S)"

          echo "Deploying application version: $DEPLOY_LABEL"

          # Deploy artifact with unique label
          eb deploy --staged --label "$DEPLOY_LABEL" --verbose
