name: CI/CD NestJS ‚Üí Elastic Beanstalk

on:
  push:
    branches:
      - staging    # deploy to staging
      - main   # deploy to production

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3. Install dependencies
      - name: Install dependencies
        run: npm ci

      # 4. Run lint
      - name: Lint
        run: npm run lint

      # 5. Run unit tests
      - name: Run tests
        run: npm test -- --coverage

      # 6. Build artifact
      - name: Build project
        run: npm run build

      # 7. Package artifact
      - name: Package artifact
        run: |
          zip -r app.zip \
            package.json package-lock.json dist/ Procfile .ebextensions/ -x "*.git*" "node_modules/*"

      # Upload artifact for deployment
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: eb-artifact
          path: app.zip

  deploy:
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: eb-artifact
          path: .

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Install EB CLI
      - name: Install EB CLI
        run: pip install --upgrade awsebcli

      - name: Deploy to Elastic Beanstalk
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          EB_APP_NAME_PROD: ${{ secrets.EB_APP_NAME_PROD }}
          EB_ENV_NAME_PROD: ${{ secrets.EB_ENV_NAME_PROD }}
          EB_APP_NAME_STAGING: ${{ secrets.EB_APP_NAME_STAGING }}
          EB_ENV_NAME_STAGING: ${{ secrets.EB_ENV_NAME_STAGING }}
          JWT_SECRET_STAGING: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET_STAGING: ${{ secrets.JWT_REFRESH_SECRET }}
          DATABASE_URI_STAGING: ${{ secrets.DATABASE_URI_STAGING }}
          JWT_SECRET_PROD: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET_PROD: ${{ secrets.JWT_REFRESH_SECRET }}
          DATABASE_URI_PROD: ${{ secrets.DATABASE_URI_PROD }}
        run: |
          set -e
          BRANCH_NAME=${GITHUB_REF##*/}

          if [ "$BRANCH_NAME" = "main" ]; then
            EB_APP_NAME="$EB_APP_NAME_PROD"
            ENV_NAME="$EB_ENV_NAME_PROD"
          elif [ "$BRANCH_NAME" = "staging" ]; then
            EB_APP_NAME="$EB_APP_NAME_STAGING"
            ENV_NAME="$EB_ENV_NAME_STAGING"
          else
            echo "‚ùå No deployment configured for branch $BRANCH_NAME"
            exit 0
          fi

          echo "üöÄ Deploying app: $EB_APP_NAME"
          echo "üåç Environment: $ENV_NAME"
          echo "üåé Region: $AWS_REGION"

          # Sanity check
          if [ -z "$ENV_NAME" ]; then
            echo "‚ùå EB_ENV_NAME is empty. Check your GitHub secrets."
            exit 1
          fi

          # Initialize EB (safe even if already exists)
          eb init "$EB_APP_NAME" --platform node.js-20 --region "$AWS_REGION" --verbose

          # Link environment explicitly
          eb use "$ENV_NAME"

          # Build version label
          DEPLOY_LABEL="app-$(date +%Y%m%d%H%M%S)"
          echo "üì¶ Deploying version: $DEPLOY_LABEL"

          # Deploy
          eb deploy "$ENV_NAME" --label "$DEPLOY_LABEL" --staged --verbose
