name: CI/CD NestJS ‚Üí Elastic Beanstalk

on:
  push:
    branches:
      - staging     # Deploy to staging
      - main        # Deploy to production

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js 20
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3Ô∏è‚É£ Install dependencies (clean)
      - name: Install dependencies
        run: npm ci

      # 4Ô∏è‚É£ Lint check
      - name: Run lint
        run: npm run lint

      # 5Ô∏è‚É£ Run tests with coverage
      - name: Run tests
        run: npm test -- --coverage

      # 6Ô∏è‚É£ Build app
      - name: Build project
        run: npm run build

      # 7Ô∏è‚É£ Package artifact for deployment
      - name: Package for Elastic Beanstalk
        run: |
          echo "Creating Elastic Beanstalk deployment package..."
          zip -r app.zip dist package.json package-lock.json Procfile .ebextensions -x "*.git*" || true
          echo "‚úÖ Package contents preview:"
          unzip -l app.zip | head -20

      # 8Ô∏è‚É£ Upload artifact to share with deploy job
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: eb-artifact
          path: app.zip

  deploy:
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      # 1Ô∏è‚É£ Download the built artifact
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: eb-artifact
          path: .

      # 2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3Ô∏è‚É£ Install Elastic Beanstalk CLI
      - name: Install Elastic Beanstalk CLI
        run: pip install --upgrade awsebcli

      # 4Ô∏è‚É£ Deploy to Elastic Beanstalk
      - name: Deploy application
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          EB_APP_NAME_PROD: ${{ secrets.EB_APP_NAME_PROD }}
          EB_ENV_NAME_PROD: ${{ secrets.EB_ENV_NAME_PROD }}
          EB_APP_NAME_STAGING: ${{ secrets.EB_APP_NAME_STAGING }}
          EB_ENV_NAME_STAGING: ${{ secrets.EB_ENV_NAME_STAGING }}
        run: |
          set -e

          BRANCH_NAME=${GITHUB_REF##*/}
          echo "üöÄ Starting deployment for branch: $BRANCH_NAME"

          if [ "$BRANCH_NAME" = "main" ]; then
            EB_APP_NAME="$EB_APP_NAME_PROD"
            EB_ENV_NAME="$EB_ENV_NAME_PROD"
          elif [ "$BRANCH_NAME" = "staging" ]; then
            EB_APP_NAME="$EB_APP_NAME_STAGING"
            EB_ENV_NAME="$EB_ENV_NAME_STAGING"
          else
            echo "‚ùå No deployment configured for branch $BRANCH_NAME"
            exit 0
          fi

          DEPLOY_LABEL="app-$(date +%Y%m%d%H%M%S)"
          S3_BUCKET="elasticbeanstalk-$AWS_REGION-$(aws sts get-caller-identity --query Account --output text)"

          echo "‚òÅÔ∏è Uploading artifact to s3://$S3_BUCKET/$DEPLOY_LABEL.zip..."
          mv app.zip $DEPLOY_LABEL.zip
          aws s3 cp $DEPLOY_LABEL.zip s3://$S3_BUCKET/$DEPLOY_LABEL.zip

          echo "üì¶ Creating new Elastic Beanstalk application version..."
          aws elasticbeanstalk create-application-version \
            --application-name "$EB_APP_NAME" \
            --version-label "$DEPLOY_LABEL" \
            --source-bundle S3Bucket=$S3_BUCKET,S3Key=$DEPLOY_LABEL.zip

          echo "üöÄ Updating environment $EB_ENV_NAME with version $DEPLOY_LABEL..."
          aws elasticbeanstalk update-environment \
            --environment-name "$EB_ENV_NAME" \
            --version-label "$DEPLOY_LABEL"

          echo "‚úÖ Deployment complete for $EB_ENV_NAME ($EB_APP_NAME)"
